#!/bin/bash

# Provides a simple interface for Consul-Vault
CONSUL_IP=$(cat /etc/environment | grep DOCKER_HOST_IP | cut -d "=" -f2)
CONSUL_PORT=8500
CONSUL_API_VERSION=v1
CONSUL_KV_API=kv
INSTALL_DIR=/opt/bin/

cfg_parser (){
    IFS=$'\n' && ini=( $(<$1) ) # convert to line-array
    ini=( ${ini[*]//;*/} )      # remove comments ;
    ini=( ${ini[*]//\#*/} )     # remove comments #
    ini=( ${ini[*]/\	=/=} )  # remove tabs before =
    ini=( ${ini[*]/=\	/=} )   # remove tabs be =
    ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around  = 
    ini=( ${ini[*]/#[/\}$'\n'cfg.section.} ) # set section prefix
    ini=( ${ini[*]/%]/ \(} )    # convert text2function (1)
    ini=( ${ini[*]/=/=\( } )    # convert item to array
    ini=( ${ini[*]/%/ \)} )     # close array parenthesis
    ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
    ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
    ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
    ini[0]="" # remove first element
    ini[${#ini[*]} + 1]='}'    # add the last brace
    eval "$(echo "${ini[*]}")" # eval the result
}

login_remote_vault(){
    ROLE=$1
    AWS_ACCOUNT_NUMBER=$2
    VAULT_URL=$3
    OPTIONS=$4

    curl -vk \
        $OPTIONS \
        https://$VAULT_URL/v1/auth/ec2-$AWS_ACCOUNT_NUMBER/login \
        -X POST \
        -d '{“role”: "$ROLE", “pkcs7”:"'$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/pkcs7 | tr -d '\n')'"}'
}

read_vault_kvp(){
    VAULT_URL=$1
    VAULT_TOKEN=$2
    VAULT_DIR=$3
    KEY=$4
    KEY_VALUE=$5

    curl \
    -H "X-Vault-Token: $VAULT_TOKEN" \
    -X GET \
    /v1/$VAULT_DIR/$KEY $KEY_VALUE
}

write_vault_kvp(){
    VAULT_URL=$1
    VAULT_TOKEN=$2
    VAULT_DIR=$3
    KEY=$4
    KEY_VALUE=$5

    curl \
    -H "X-Vault-Token: $VAULT_TOKEN" \
    -X POST \
    $VAULT_URL/v1/$VAULT_DIR/$KEY $KEY_VALUE
}

delete_vault_kvp(){
    VAULT_URL=$1
    VAULT_TOKEN=$2
    VAULT_DIR=$3
    KEY=$4

    curl \
    -H "X-Vault-Token: $VAULT_TOKEN" \
    -X DELETE \
    $VAULT_URL/v1/$VAULT_DIR/$KEY
}

list_vault_kvp(){
    VAULT_URL=$1
    VAULT_TOKEN=$2
    VAULT_DIR=$3

    curl \
    -H "X-Vault-Token: $VAULT_TOKEN" \
    -X DELETE \
    $VAULT_URL/v1/$VAULT_DIR/
}

disable_stack(){
	sudo systemctl disable carbondale@1 > /dev/null 2>&1
}

setup_stack(){
	sudo /bin/cp /workspace/carbondale/src/carbondale@.service /etc/systemd/system/
	sudo systemctl daemon-reload
}

start_stack(){
    setup_stack
	printf "Starting Carbondale...\n"
	sudo systemctl enable carbondale@1 > /dev/null 2>&1
	sudo systemctl start carbondale@1
    sleep 15
}

stop_stack(){
	printf "Stopping Carbondale...\n"
	sudo systemctl stop carbondale@1
}

restart_stack(){
	printf "Restarting Carbondale...\n"
	sudo systemctl restart carbondale@1
}

init_vault(){
    VAULT_REPO=/workspace/carbondale/src/vault
    /bin/sh -c \
    "cd ${VAULT_REPO} \
    && ./setup_vault.sh"
}

validate_vault(){
    CONSUL_HEALTH_API=health/state/passing
    curl -s http://${CONSUL_IP}:${CONSUL_PORT}/${CONSUL_API_VERSION}/${CONSUL_HEALTH_API} > /dev/null 2>&1
    if [ "$?" -eq 0 ];then
    	printf 'Vault is unsealed and healthy!\n\n'
    else
    	printf 'Vault is not unsealed.\n\n' 
        exit 1
    fi
}

setup_vault(){
    type vault > /dev/null 2>&1
    if [[ "$?" == "1" ]]; then
        printf '%s\n' 'Installing Vault...'
        sudo /bin/cp /workspace/carbondale/bin/vault "$INSTALL_DIR"
    fi
}

setup_consul(){
    type consul > /dev/null 2>&1
    if [[ "$?" == "1" ]]; then
        printf '%s\n' 'Installing Consul...'
        sudo /bin/cp /workspace/carbondale/bin/consul "$INSTALL_DIR"
    fi
}

setup_aws(){
    AWS_USERNAME=$(aws iam get-user|jq -r '.User.UserName')
    CREDENTIALS=${CREDENTIALS:-~/.aws/credentials}
    PROFILE=${PROFILE:-default}

    validate_vault
    if [[ ! -r "${CREDENTIALS}" ]]; then
        echo "File not found: '${CREDENTIALS}'"
        exit 1
    fi
    
    cfg_parser "${CREDENTIALS}"
    if [[ $? -ne 0 ]]; then
        echo "Parsing credentials file '${CREDENTIALS}' failed"
        exit 1
    fi

    cfg.section.${PROFILE}
    if [[ $? -ne 0 ]]; then
        echo "Profile '${PROFILE}' not found"
        exit 1
    fi
    
    vault write secret/aws/aws_username aws_username=${AWS_USERNAME} > /dev/null 2>&1
    printf '%s\n\n' 'Success! AWS username was saved to Vault'

    vault write secret/aws/aws_access_key aws_access_key=${aws_access_key_id} > /dev/null 2>&1
    printf '%s\n\n' 'Success! AWS access key was saved to Vault'

    vault write secret/aws/aws_secret_key aws_secret_key=${aws_secret_access_key} > /dev/null 2>&1
    printf '%s\n\n' 'Success! AWS secret key was saved to Vault'
    exit 0
}

setup_datadog(){
    DATADOG_URL=https://app.datadoghq.com/account/settings#api
    printf "Visit ${DATADOG_URL} to get Datadog API and Application keys\n"
    printf "Enter Datadog API key and press [ENTER]: "
    read DATADOG_API
    printf '\n%s\n' 'Testing authentication with Datadog API...'
    
    DATADOG_API_CHECK=$(curl -s "https://app.datadoghq.com/api/v1/validate?api_key=$DATADOG_API")
    if [[ $DATADOG_API_CHECK =~ \{\"valid\":true\} ]] ; then
        vault write secret/datadog/app_key app_key=${DATADOG_APP} > /dev/null 2>&1
        printf '%s\n\n' 'Success! AWS secret key was saved to Vault'
    else
        printf '\n%s\n' 'Failed!: Datadog API key is invalid'
        exit 1
    fi

    printf "Enter Datadog Application key and press [ENTER]: "
    read DATADOG_APP
    vault write secret/datadog/app_key app_key=${DATADOG_APP} > /dev/null 2>&1
    printf '%s\n\n' 'Success! AWS secret key was saved to Vault'
    exit 0
}

usage(){
	printf "Usage:\n"
	printf "\t aws\t\t: Gather and store metadata for AWS\n"
    printf "\t datadog\t: Gather and store metadata for the Datadog service.\n"
    printf "\t delete\t\t: Deletes a key-value pair from Vault. (e.g. vnl vault delete <vault_url> <vault_token> <vault_dir> <key>)"
	printf "\t down\t\t: Shutdown Carbondale.\n"
    printf "\t init\t\t: Runs initialization and unseal process for Vault"
    printf "\t list\t\t: List key-value pairs in specified Vault directory. (e.g. vnl vault list <vault_url> <vault_token> <vault_dir>)"
    printf "\t login\t\t: Login to Vault. (e.g. vnl vault login <role> <aws_account_nunber> <vault_url> <proxy_options>)"
	printf "\t setup\t\t: Setup up Consul and Vault CLI.\n"
    printf "\t shell\t\t: Open up shell to Vault Docker container.\n"
    printf "\t status\t\t: Provides status for Consul and Vault.\n"
    printf "\t read\t\t: Reads a key-value pair from Vault. (e.g. vnl vault read <vault_url> <vault_token> <vault_dir> <key> <key_value>)"
	printf "\t restart\t: Restart Carbondale.\n"
	printf "\t up\t\t: Spin up Carbondale.\n"
    printf "\t write\t\t: Writes a key-value pair from Vault. (e.g. vnl vault write <vault_url> <vault_token> <vault_dir> <key> <key_value>)"
	printf "\t help\t\t: Show this help.\n"
	exit 0
}

INPUT_1=$1
if [[ -z "$INPUT_1" ]]; then
	usage
fi

case "$INPUT_1" in
	aws)
        setup_aws
        ;;
    datadog)
        setup_datadog
        ;;
    delete)
        delete_vault_kvp "$2" "$3" "$4"
        ;;
	down)
		stop_stack
		;;
	disable)
		disable_stack
		;;
    init)
        init_vault
        ;;
    list)
        list_vault_kvp "$2" "$3" "$4"
        ;;
    login
        login_remote_vault "$2" "$3" "$4" "$5"
        ;;
    setup)
        setup_vault
        setup_consul
        ;;
    shell)
        sudo docker exec -it \
            vault sh
        ;;
    status)
        setup_vault
        setup_consul
        vault status
        consul info
        ;;
    read)
        read_vault_kvp "$2" "$3" "$4" "5"
        ;;
	restart)
		stop_stack
		start_stack
		;;
    up)
        start_stack
        init_vault
        ;;
    write)
        write_vault_kvp "$2" "$3" "$4" "$5"
        ;;
	* | help)
		usage
		;;
esac
